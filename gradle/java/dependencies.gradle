allprojects {
  apply plugin: deps.plugins.dependencychecks.get().pluginId

  def mainConfigurations = project.configurations.matching {
    it.name in [
        "compileClasspath",
        "runtimeClasspath"
    ]
  }
  def testConfigurations = project.configurations.matching {
    it.name in [
        "annotationProcessor",
        "testCompileClasspath",
        "testRuntimeClasspath"
    ]
  }

  dependencyVersionChecks {
    lockFileComment = "An inventory of resolved dependency versions. Do not edit this file directly."

    configurationGroups {
      // this groups all 'main' source set configurations from all projects.
      main_dependencies {
        include mainConfigurations
      }
      // this groups all 'test' and other configurations from all projects.
      test_dependencies {
        include testConfigurations
      }
    }
  }

  dependencies {
    constraints {
      mainConfigurations.configureEach { Configuration conf ->
        // no resolutions for conflicting dependencies at the moment.
      }
    }
  }
}

// Configure version catalog cleanups plugin.
configure(rootProject) {
  apply plugin: deps.plugins.versionCatalogUpdate.get().pluginId

  versionCatalogUpdate {
    sortByKey = true

    versionCatalogs {
      deps {
        catalogFile = file("versions.toml")
      }
    }
  }

  tasks.matching { it.name == "tidy" }.configureEach {
    it.dependsOn(":versionCatalogFormatDeps")
  }

  tasks.matching { it.path in [":versionCatalogUpdateDeps"] }.configureEach {
    it.interactive = true
  }

  tasks.register("updateTomls", {
    dependsOn ":versionCatalogUpdateDeps"
  })
}